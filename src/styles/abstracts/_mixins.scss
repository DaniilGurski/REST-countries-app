@use "breakpoints" as *;
@use "colors"    as *;
@use "functions" as *;
@use "type" as *;
@use "sass:math";
@use "sass:map";
@use "sass:meta";


@mixin mq-min($key) {
    @if map.has-key($breakpoints, $key) {
        $size: map.get($breakpoints, $key);

        @media (min-width: em($size)) {
            @content;
        }
    } @else {
        @error "Invalid breakpoint #{$key}";
    }
}


@mixin mq-max($key) {
    @if map.has-key($breakpoints, $key) {
        $size: map.get($breakpoints, $key);

        @media (max-width: em($size)) {
            @content;
        }
    } @else {
        @error "Invalid breakpoint #{$key}";
    }
}


@mixin font-face($font-family, $url, $weight) {
    @font-face {
        font-family: $font-family;
        src: url($url) format('truetype');
        font-weight: $weight;
    }
}


// Convert color map into css custom properties
@mixin colors($map) {
    @each $role, $shades in $map {
        @each $lightness, $color in $shades {
            --clr-#{$role}-#{$lightness}: #{$color};
        }
    }
}


// Convert map with type related values either into css custom properties 
@mixin type($map) {    
    @each $size, $typescale in $map {
        @if $size == small {
            @each $scale, $value in $typescale {
                --fs-#{$scale}: #{$value};
            }
        } 

        @if $size == medium {
            @include mq-min("medium") {
                @each $scale, $value in $typescale {
                    --fs-#{$scale}: #{$value};
                }
            }
        } 
        
        @if $size == large {
            @include mq-min("large") {
                @each $scale, $value in $typescale {
                    --fs-#{$scale}: #{$value};
                }
            }
        } 
    }
}


@mixin flex-gap($gap: 16) {
    display: flex;

    @if type-of($gap) == string{
        @error "Use unitless integer in px";
    } @else {
        gap: rem($gap);
    }
}


@mixin grid-gap($gap: 16) {
    display: grid;

    @if type-of($gap) == string{
        @error "Use unitless integer in px";
    } @else {
        gap: rem($gap);
    }
}



@mixin place-items-center() {
    display: grid;
    place-items: center;
}


@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}


@mixin reset-appearence() {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
}


